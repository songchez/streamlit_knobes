{"ast":null,"code":"var _jsxFileName = \"/Users/sanchezna/component-nobes/my_component/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\n/**\n * This is a React-based component template. The passed props are coming from the\n * Streamlit library. Your custom args can be accessed via the `args` props.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyComponent({\n  args,\n  theme\n}) {\n  _s();\n  const {\n    name\n  } = args;\n  const [isFocused, setIsFocused] = useState(false);\n  const [numClicks, setNumClicks] = useState(0);\n  const style = useMemo(() => {\n    if (!theme) return {};\n\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`;\n    return {\n      border: borderStyling,\n      outline: borderStyling\n    };\n  }, [theme, isFocused]);\n  useEffect(() => {\n    Streamlit.setComponentValue(numClicks);\n  }, [numClicks]);\n\n  // setFrameHeight should be called on first render and evertime the size might change (e.g. due to a DOM update).\n  // Adding the style and theme here since they might effect the visual size of the component.\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  }, [style, theme]);\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback(() => {\n    setNumClicks(prevNumClicks => prevNumClicks + 1);\n  }, []);\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Hello, \", name, \"! \\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      style: style,\n      onClick: onClicked,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      children: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s(MyComponent, \"7A4R+/QtW+RkszZWrJwC/jUNw6w=\");\n_c = MyComponent;\nexport default _c2 = withStreamlitConnection(MyComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useCallback","useEffect","useMemo","useState","jsxDEV","_jsxDEV","MyComponent","args","theme","_s","name","isFocused","setIsFocused","numClicks","setNumClicks","style","borderStyling","primaryColor","border","outline","setComponentValue","setFrameHeight","onClicked","prevNumClicks","onFocus","onBlur","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["/Users/sanchezna/component-nobes/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n} from \"streamlit-component-lib\"\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  ReactElement,\n} from \"react\"\n\n/**\n * This is a React-based component template. The passed props are coming from the\n * Streamlit library. Your custom args can be accessed via the `args` props.\n */\nfunction MyComponent({ args, theme }: ComponentProps): ReactElement {\n  const { name } = args\n\n  const [isFocused, setIsFocused] = useState(false)\n  const [numClicks, setNumClicks] = useState(0)\n\n  const style: React.CSSProperties = useMemo(() => {\n    if (!theme) return {}\n\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    return { border: borderStyling, outline: borderStyling }\n  }, [theme, isFocused])\n\n  useEffect(() => {\n    Streamlit.setComponentValue(numClicks)\n  }, [numClicks])\n\n  // setFrameHeight should be called on first render and evertime the size might change (e.g. due to a DOM update).\n  // Adding the style and theme here since they might effect the visual size of the component.\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n  }, [style, theme])\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback((): void => {\n    setNumClicks((prevNumClicks) => prevNumClicks + 1)\n  }, [])\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback((): void => {\n    setIsFocused(true)\n  }, [])\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback((): void => {\n    setIsFocused(false)\n  }, [])\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <span>\n      Hello, {name}! &nbsp;\n      <button\n        style={style}\n        onClick={onClicked}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      >\n        Click Me!\n      </button>\n    </span>\n  )\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";;AAAA,SACEA,SAAS,EACTC,uBAAuB,QAElB,yBAAyB;AAChC,OAAOC,KAAK,IACVC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,QAAQ,QAEH,OAAO;;AAEd;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,SAASC,WAAWA,CAAC;EAAEC,IAAI;EAAEC;AAAsB,CAAC,EAAgB;EAAAC,EAAA;EAClE,MAAM;IAAEC;EAAK,CAAC,GAAGH,IAAI;EAErB,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAMY,KAA0B,GAAGb,OAAO,CAAC,MAAM;IAC/C,IAAI,CAACM,KAAK,EAAE,OAAO,CAAC,CAAC;;IAErB;IACA;IACA,MAAMQ,aAAa,GAAG,aAAaL,SAAS,GAAGH,KAAK,CAACS,YAAY,GAAG,MAAM,EAAE;IAC5E,OAAO;MAAEC,MAAM,EAAEF,aAAa;MAAEG,OAAO,EAAEH;IAAc,CAAC;EAC1D,CAAC,EAAE,CAACR,KAAK,EAAEG,SAAS,CAAC,CAAC;EAEtBV,SAAS,CAAC,MAAM;IACdJ,SAAS,CAACuB,iBAAiB,CAACP,SAAS,CAAC;EACxC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA;EACAZ,SAAS,CAAC,MAAM;IACdJ,SAAS,CAACwB,cAAc,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACN,KAAK,EAAEP,KAAK,CAAC,CAAC;;EAElB;EACA,MAAMc,SAAS,GAAGtB,WAAW,CAAC,MAAY;IACxCc,YAAY,CAAES,aAAa,IAAKA,aAAa,GAAG,CAAC,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,OAAO,GAAGxB,WAAW,CAAC,MAAY;IACtCY,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMa,MAAM,GAAGzB,WAAW,CAAC,MAAY;IACrCY,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA,oBACEP,OAAA;IAAAqB,QAAA,GAAM,SACG,EAAChB,IAAI,EAAC,QACb,eAAAL,OAAA;MACEU,KAAK,EAAEA,KAAM;MACbY,OAAO,EAAEL,SAAU;MACnBE,OAAO,EAAEA,OAAQ;MACjBC,MAAM,EAAEA,MAAO;MAAAC,QAAA,EAChB;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX;;AAEA;AACA;AACA;AACA;AACA;AAAAtB,EAAA,CA/DSH,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AAgEpB,eAAA2B,GAAA,GAAenC,uBAAuB,CAACQ,WAAW,CAAC;AAAA,IAAA0B,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}